events {
    worker_connections 1024;
}

env LAUNCHDARKLY_SDK_KEY;
env LAUNCHDARKLY_FLAG_KEY;
env LAUNCHDARKLY_SDK_KEY_FILE;


http {
    resolver 127.0.0.11 valid=10s;

    lua_package_path ";;/usr/local/openresty/nginx/scripts/?.lua;";

    init_worker_by_lua_file scripts/shared.lua;

    ignore_invalid_headers off;

    server {
        location / {
            set $proxy_host "blue";
            set $ld_request_id "";

            rewrite_by_lua_block {
                local ld = require("launchdarkly_server_sdk")
                local client = require("shared")

                local request_id = ngx.var.http_x_ld_request_id;

                if request_id == nil or request_id == "" then
                    request_id = tostring(math.random(0, 10000000))
                end

                ngx.var.ld_request_id = request_id

                local context = ld.makeContext({
                    request = {
                        key = request_id
                    }
                })

                local flag_key = "service-proxy-host"
                local flag_value = client:stringVariation(context, flag_key, "localhost")

                ngx.var.proxy_host = string.gsub(flag_value, "%s+", "")
            }

            proxy_pass http://$proxy_host:8080;
            proxy_set_header Host $proxy_host;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header X-LD-Request-Id $ld_request_id;
            proxy_pass_request_headers on;
        }
    }
}
